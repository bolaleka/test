{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\owner1\\\\Desktop\\\\React-App\\\\client\\\\src\\\\index.tsx\";\nimport { onError } from '@apollo/client/link/error';\nimport ReactDOM from \"react-dom\";\nimport Main from \"./Main\";\nimport './CSS/index.css';\nimport { ApolloClient, ApolloProvider, HttpLink, InMemoryCache, from } from '@apollo/client'; //Error handler in case we are unable to connect to the server. \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst errorLink = onError(({\n  graphQLErrors,\n  networkError\n}) => {\n  if (graphQLErrors) {\n    graphQLErrors.map(({\n      message,\n      locations,\n      path\n    }) => {\n      alert(`GraphQL Error  ${message}\\n${locations}\\n${path}`);\n      return message;\n    });\n  }\n}); //Fetch the apollo server link to have access to the data.\n\nconst link = from([errorLink, new HttpLink({\n  uri: 'http://localhost:4000/'\n})]);\nconst client = new ApolloClient({\n  cache: new InMemoryCache({\n    // Set props __TypeName to false.\n    addTypename: false\n  }),\n  link: link\n});\nReactDOM.render( /*#__PURE__*/_jsxDEV(ApolloProvider, {\n  client: client,\n  children: /*#__PURE__*/_jsxDEV(Main, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 38,\n  columnNumber: 3\n}, this), document.getElementById(\"root\"));","map":{"version":3,"sources":["C:/Users/owner1/Desktop/React-App/client/src/index.tsx"],"names":["onError","ReactDOM","Main","ApolloClient","ApolloProvider","HttpLink","InMemoryCache","from","errorLink","graphQLErrors","networkError","map","message","locations","path","alert","link","uri","client","cache","addTypename","render","document","getElementById"],"mappings":";AAAA,SAAQA,OAAR,QAAsB,2BAAtB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,iBAAP;AACA,SACEC,YADF,EAEEC,cAFF,EAGEC,QAHF,EAIEC,aAJF,EAKEC,IALF,QAMO,gBANP,C,CAQA;;;AACA,MAAMC,SAAS,GAAGR,OAAO,CAAC,CAAC;AAACS,EAAAA,aAAD;AAAgBC,EAAAA;AAAhB,CAAD,KAAmC;AAC3D,MAAGD,aAAH,EAAkB;AAChBA,IAAAA,aAAa,CAACE,GAAd,CAAkB,CAAC;AAACC,MAAAA,OAAD;AAAUC,MAAAA,SAAV;AAAqBC,MAAAA;AAArB,KAAD,KAAgC;AAChDC,MAAAA,KAAK,CAAE,kBAAiBH,OAAQ,KAAIC,SAAU,KAAIC,IAAK,EAAlD,CAAL;AACA,aAAOF,OAAP;AACD,KAHD;AAID;AACF,CAPwB,CAAzB,C,CASA;;AACA,MAAMI,IAAI,GAAGT,IAAI,CAAC,CACfC,SADe,EAEhB,IAAIH,QAAJ,CAAa;AAACY,EAAAA,GAAG,EAAE;AAAN,CAAb,CAFgB,CAAD,CAAjB;AAKA,MAAMC,MAAM,GAAG,IAAIf,YAAJ,CAAiB;AAC9BgB,EAAAA,KAAK,EAAE,IAAIb,aAAJ,CAAkB;AACvB;AACAc,IAAAA,WAAW,EAAE;AAFU,GAAlB,CADuB;AAK9BJ,EAAAA,IAAI,EAAEA;AALwB,CAAjB,CAAf;AAQAf,QAAQ,CAACoB,MAAT,eACE,QAAC,cAAD;AAAgB,EAAA,MAAM,EAAEH,MAAxB;AAAA,yBACE,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADF,EAIEI,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF","sourcesContent":["import {onError} from '@apollo/client/link/error';\r\nimport ReactDOM from \"react-dom\";\r\nimport Main from \"./Main\";\r\nimport './CSS/index.css';\r\nimport {\r\n  ApolloClient,\r\n  ApolloProvider,\r\n  HttpLink,\r\n  InMemoryCache,\r\n  from\r\n} from '@apollo/client';\r\n\r\n//Error handler in case we are unable to connect to the server. \r\nconst errorLink = onError(({graphQLErrors, networkError}) => {\r\n  if(graphQLErrors) {\r\n    graphQLErrors.map(({message, locations, path}) => {\r\n      alert(`GraphQL Error  ${message}\\n${locations}\\n${path}`)\r\n      return(message);\r\n    })\r\n  }\r\n});\r\n\r\n//Fetch the apollo server link to have access to the data.\r\nconst link = from([\r\n   errorLink,\r\n  new HttpLink({uri: 'http://localhost:4000/'}),\r\n])\r\n\r\nconst client = new ApolloClient({\r\n  cache: new InMemoryCache({\r\n    // Set props __TypeName to false.\r\n    addTypename: false\r\n  }),\r\n  link: link,\r\n});\r\n \r\nReactDOM.render(\r\n  <ApolloProvider client={client} >\r\n    <Main/>\r\n  </ApolloProvider>,\r\n  document.getElementById(\"root\")\r\n);"]},"metadata":{},"sourceType":"module"}